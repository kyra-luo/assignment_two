#!/usr/bin/env bash
# CITS 4407 Assignment 2
# Author Zishan Luo
# Student ID 22448064

# init the path for storing the data path
gdp_path=''
life_path=''
homicide_path=''

invalid_format=false

# Function to check if a file is tab-separated and read the TSV header.
# Check if the input is three files or not.
if [ $# -ne 3 ]; then
    echo "Error: Expected 3 input files, received $#"
    exit 1
fi

# Function to check file format and cell consistency
check_file() {
    local file="$1"

    # Check if the file is tab-separated
    # if the file is not tsv, exit the program.
    if ! awk -F'\t' 'NR==1 {exit !($0 ~ /\t/)}' "$file"; then
        echo "Invalid file format in $file. File is not tab-separated."
        invalid_format=true
        return
    fi

    # Check if the number of cells in each line matched the header
    # if not matched the header, print the position out
    num_cells_header=$(awk -F'\t' 'NR==1 {print NF; exit}' "$file")
    if ! awk -F'\t' -v header_cells="$num_cells_header" 'NR>1 {if (NF != header_cells) {print "Mismatch in number of cells in line: " $0; exit 1}}' "$file"; then
        invalid_format=true
        return
    fi
}

# Call function for checking all input files
for file in "$@"; do
    check_file "$file"
done

# Exit if any file is invalid
if [ "$invalid_format" = true ]; then
    exit 1
fi

# function for clean the file.
function clean_data() {
    local filename=$1;

    # Search keyword at first line, find the target column.
    local fields_expected=7;
    local is_gdp=$(awk -F '\t' 'NR==1 && /GDP/ {print 1} NR==1 && !/GDP/ {print 0}' ${filename});
    local is_life=$(awk -F '\t' 'NR==1 && /Life/ {print 1} NR==1 && !/Life/ {print 0}' ${filename});
    local is_homicide=$(awk -F '\t' 'NR==1 && /Homicide/ {print 1} NR==1 && !/Homicide/ {print 0}' ${filename});

    # set file path
    if [ $is_gdp == 1 ]; then
        gdp_path=$filename;
    elif [ $is_homicide == 1 ]; then
        homicide_path=$filename;
        fields_expected=4;
    elif [ $is_life == 1 ]; then
        life_path=$filename;
    fi

    local tmpfile=$(mktemp);
    # remvoe Continent field only 6 columns
    if [ $is_homicide != 1 ]; then
        awk -F '\t' '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}' $filename > $tmpfile
        cat $tmpfile > $filename
    fi

    # remove rows that have invalid year only keep the 2011-2021
    awk -F '\t' 'NR==1 || ($3 >= 2011 && $3 <= 2021)' $filename > $tmpfile
    cat $tmpfile > $filename

    # remove rows that have empty Code field
    awk -F '\t' '$2 ~ /^\s*$/ {next} 1' $filename > $tmpfile
    cat $tmpfile > $filename

    # add a column for join
    if [ $is_gdp == 1 ]; then
        awk -F '\t' '{print $1"_"$2"_"$3"\t"$1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}' $filename > $tmpfile
    else
        awk -F '\t' '{print $1"_"$2"_"$3"\t"$4"\t"$5"\t"$6}' $filename > $tmpfile
    fi
    cat $tmpfile > $filename


    # sort data
    head -n 1 $filename > $tmpfile
    tail -n +2 $filename | sort -k1,1 -t $'\t' >> $tmpfile
    cat $tmpfile > $filename
    return 0
}

for data in "$@"; do
    tmp=$(mktemp);
    # copy data
    cp $data ${tmp};

    # clean data
    clean_data ${tmp};
done


# merge gdp and life data as table 1
join_table1=$(mktemp);
join -t $'\t' $gdp_path $life_path > $join_table1

# join table 1 and homicide data as table 2
join_table2=$(mktemp);
join -t $'\t' $join_table1 $homicide_path > $join_table2

# print data
awk -F '\t' '{print $2"\t"$3"\t"$4"\t"$6"\t"$7"\t"$11"\t"$8"\t"$5}' $join_table2



